[def __MW_WRAP_FN__ [link wrap.reference.header.MW_WRAP_FN MW_WRAP_FN]]
[def __MW_WRAP_FN_FIX__ [link wrap.reference.header.MW_WRAP_FN_FIX MW_WRAP_FN_FIX]]
[def __MW_WRAP_MEM__ [link wrap.reference.header.MW_WRAP_MEM MW_WRAP_MEM]]
[def __MW_WRAP_MEM_FIX__ [link wrap.reference.header.MW_WRAP_MEM_FIX MW_WRAP_MEM_FIX]]
[def __MW_WRAP_STATIC_MEM__ [link wrap.reference.header.MW_WRAP_STATIC_MEM MW_WRAP_STATIC_MEM]]
[def __MW_WRAP_STATIC_MEM_FIX__ [link wrap.reference.header.MW_WRAP_STATIC_MEM_FIX MW_WRAP_STATIC_MEM_FIX]]

[section:header Header <mw/wrap.hpp>]

[section:MW_WRAP_FN Macro MW_WRAP_FN]

[section:synopsis Synopsis]

```
// In header: <mw/wrap.hpp>
__MW_WRAP_FN__(Scope, Name, Return, Signature) 
__MW_WRAP_FN__(Name, Return, Signature)
```
 
[endsect]

[section:description Description]

This macro can be used to declare a run-time wrap for a function; it can be used several times from different types, if they are not attempting to set it at the same time.
The Macro taking three parameters is a convenience overload when the function is in the global scope.

[note Must be member of a class.]
[warning Construction will throw an `std::runtime_error` if the wrap is already set.]
[note This also does work with static member functions. Though since they may be in a type alias or a template the usage of __MW_WRAP_STATIC_MEM__ is recommended.]



[section:parameters Parameters] 


[variablelist
	[[Name]      [The name of the function, without the scope]]
    [[Return]    [The return value of the function]]
    [[Scope]     [The scope of the function, must be put into parenthesis]]
    [[Signature] [The parameter function list]]
] 

[endsect]

[endsect]

[section:example Example]

Given two scoped functions like this

```
double unscoped_fun(int d);

namespace my_namespace
{
    namespace inner_namespace
    {
        double function(const int & i);
    }
}
```

we can declare a wrap like this

```
struct my_stubber
{
    double out;
    int in;
    __MW_WRAP_FN__((my_namespace, inner_namespace), function, double, (const int & val))
    {
        in = val;
        return out;
    }
    __MW_WRAP_FN__(unscoped_fun, double, (int val))
    {
        in = val;
        return out;
    } 
};
```

[endsect]
[endsect]



[section:MW_WRAP_MEM Macro MW_WRAP_MEM]


[section:synopsis Synopsis]

```
// In header: <mw/wrap.hpp>
__MW_WRAP_MEM__(Type, Name, Return, Signature)
```

[endsect]

[section:description Description]

This macro can be used to declare a run-time wrap for a member-function. It will pass the this-pointer with the correct qualification as `this_`. 
It can be used several times from different types, if they are not attempting to set it at the same time.

[note Must be member of a class.]
[warning Construction will throw an `std::runtime_error` if the wrap is already set.]
[note The type must be visible at the point of declaration of the wrap function.]
[note It can be used with templates due to utilization of `extern template`, as shown in the tutorial.]
[important There is currently no support for handling ref-qualifiers for the member-functions.]

[section:parameters Parameters]


[variablelist
	[[Name]      [The name of the function, without the scope]]
    [[Return]    [The return value of the function]]
    [[Signature] [The parameter function list]]
    [[Type]      [The type the function is a member of including the qualifiers. Can be inside parenthesis, e.g. `(const std::vector<int, std::allocator<int>>)`.]]
]

[endsect]

[endsect]

[section:example Example]

Given two scoped functions like this

```
namespace my_namespace
{
    struct foo
    {
        int value = 42;

        int bar();
        int bar() const;
    };
}
```

we can declare a wrap like this

```
struct my_stubber
{
    int out;
    int foo_value;

    __MW_WRAP_MEM__((const my_namespace::foo), bar, int, ())
    {
        this_->value = foo_value;
        return out;
    }

    __MW_WRAP_MEM__(my_namespace::foo, bar, int, ())
    {
        foo_value = this_->value;
        return out;
    }
};
```

[endsect]
[endsect]



[section:MW_WRAP_STATIC_MEM Macro MW_WRAP_STATIC_MEM]


[section:synopsis Synopsis]

```
// In header: <mw/wrap.hpp>
__MW_WRAP_STATIC_MEM__(Type, Name, Return, Signature)
```

[endsect]

[section:description Description]

This macro can be used to declare a run-time wrap for a static member-functions.

[note The type must be visible at the point of declaration of the wrap function.]
[note It can be used with templates due to utilization of `extern template`, as shown in the tutorial.]

[section:parameters Parameters]


[variablelist
	[[Name]      [The name of the function, without the scope]]
    [[Return]    [The return value of the function]]
    [[Signature] [The parameter function list]]
    [[Type]      [The type the function is a member of including the qualifiers. Can be inside parenthesis, e.g. `(const std::vector<int, std::allocator<int>>)`.]]
]

[endsect]

[endsect]

[section:example Example]

Given two scoped functions like this

```
namespace my_namespace
{
    struct foo
    {
        static int static_bar();
    };
}
```

we can declare a wrap like this

```
struct my_stubber
{
    int out;
    __MW_WRAP_STATIC_MEM__(my_namespace::foo, static_bar, int, ())
    {
        return out;
    }
};
```

[endsect]
[endsect]


[section:MW_WRAP_FN_FIX Macro MW_WRAP_FN_FIX]


[section:synopsis Synopsis]

```
// In header: <mw/wrap.hpp>
__MW_WRAP_FN_FIX__(Scope, Name, Return, Signature)
__MW_WRAP_FN_FIX__(Name, Return, Signature)
```

[endsect]

[section:description Description]

This macro can be used to declare a compile-time constant wrap for a function.
The Macro taking three parameters is a convenience overload when the function is in the global scope.

[note Must be member of a class.]
[warning Construction will throw an `std::runtime_error` if the wrap is already set.]
[note This also does work with static member functions. Though since they may be in a type alias or a template the usage of MW_WRAP_STATIC_MEM_FIX is recommended.]



[section:parameters Parameters]


[variablelist
	[[Name]      [The name of the function, without the scope]]
    [[Return]    [The return value of the function]]
    [[Scope]     [The scope of the function, must be put into parenthesis]]
    [[Signature] [The parameter function list]]
]

[endsect]

[endsect]

[section:example Example]

Given two scoped functions like this

```
double unscoped_fun(int d);

namespace my_namespace
{
    namespace inner_namespace
    {
        double function(const int & i);
    }
}
```

we can declare a wrap like this

```
__MW_WRAP_FN_FIX__((my_namespace, inner_namespace), function, double, (const int & val))
{
    return val;
}

__MW_WRAP_FN_FIX__(unscoped_fun, double, (const int & val))
{
    return val;
}
```

[endsect]
[endsect]

[section:MW_WRAP_MEM_FIX Macro MW_WRAP_MEM_FIX]


[section:synopsis Synopsis]

```
// In header: <mw/wrap.hpp>
__MW_WRAP_MEM_FIX__(Type, Name, Return, Signature)
```

[endsect]

[section:description Description]

This macro can be used to declare a compile-time constant wrap for a member-functions. It will pass the this-pointer with the correct qualification as this_.

[note The type must be visible at the point of declaration of the wrap function.]
[note It can be used with templates due to utilization of `extern template`, as shown in the tutorial.]
[important There is currently no support for handling ref-qualifiers for the member-functions.]

[section:parameters Parameters]


[variablelist
	[[Name]      [The name of the function, without the scope]]
    [[Return]    [The return value of the function]]
    [[Signature] [The parameter function list]]
    [[Type]      [The type the function is a member of including the qualifiers. Can be inside parenthesis, e.g. `(const std::vector<int, std::allocator<int>>)`.]]
]

[endsect]

[endsect]

[section:example Example]

Given two scoped functions like this

```
namespace my_namespace
{
    struct foo
    {
        int value = 42;

        int bar();
        int bar() const;
    };
}
```

we can declare a wrap like this

```
__MW_WRAP_MEM_FIX__((const my_namespace::foo), bar, int, ())
{
    return this_->value;
}

__MW_WRAP_MEM_FIX__(my_namespace::foo, bar, int, ())
{
    this_->other_val = 12;
    return this->other_val;
}
```

[endsect]
[endsect]



[section:MW_WRAP_STATIC_MEM_FIX Macro MW_WRAP_STATIC_MEM_FIX]


[section:synopsis Synopsis]

```
// In header: <mw/wrap.hpp>
__MW_WRAP_STATIC_MEM_FIX__(Type, Name, Return, Signature)
```

[endsect]

[section:description Description]

This macro can be used to declare a run-time wrap for a member-function.  It can be used several times from different types, if they are not attempting to set it at the same time.

[note The type must be visible at the point of declaration of the wrap function.]
[note It can be used with templates due to utilization of `extern template`, as shown in the tutorial.]

[section:parameters Parameters]


[variablelist
	[[Name]      [The name of the function, without the scope]]
    [[Return]    [The return value of the function]]
    [[Signature] [The parameter function list]]
    [[Type]      [The type the function is a member of including the qualifiers. Can be inside parenthesis, e.g. `(const std::vector<int, std::allocator<int>>)`.]]
]

[endsect]

[endsect]

[section:example Example]

Given two scoped functions like this

```
namespace my_namespace
{
    struct foo
    {
        static int static_bar();
    };
}
```

we can declare a wrap like this

```
__MW_WRAP_STATIC_MEM_FIX__(my_namespace::foo, static_bar, int, ())
{
    return 42;
}
```

[endsect]
[endsect]
[endsect]

