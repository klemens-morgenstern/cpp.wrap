[section:intro Introduction]

This tool provides a convenient way to use the wrap function of the [@ftp://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_node/ld_3.html linker], 
though currently only `ld` is supported.
This meant that a function call can be intercepted and redirected during link time. This tool will take care of the name mangling, that makes the `wrap` 
functionality difficult to use with C++. 

[important This only works for function calls accross compile units.] 


So as simple example, we want to intercept the call of `bar(int)`


```
//foo.cpp
void foo(int i) { bar(i); } 
```

```
//bar.cpp
void bar(int i) { }
```

Now for our test we want to redirect the call of `bar` from `foo` during link-time. This can advantageous, 
because the produced binary code is the same, while only the sections and labels are changed.

[def CPP_WRAP_FN [link wrap.reference.header.CPP_WRAP_FN CPP_WRAP_FN]]
[def cpp/wrap.hpp [link wrap.reference.header cpp/wrap.hpp]]

[import ../example/intro.cpp]
[intro]

In order for that too work, we need to generate an extra source file from the generated objects. This is done with our tool, so the name mangling is taken care of.
[teletype]

```
g++ -c foo.cpp -o foo.o
g++ -c bar.cpp -o bar.o
g++ -c wrap.cpp -o wrap.o
cppwrap foo.o bar.o wrap.o --wrapper=wrap.opt --output=wrap_gen.cpp --indirect
g++ -c wrap_gen.cpp -o wrap_gen.o
g++ foo.o bar.o wrap.o wrap_gen.o -o test @wrap.opt
./test
```

The file `wrap.opt` contains the options for the wrap (`-Wl,--wrap=_ZN3barEKi`) and is passed via respond-file to the linker. The `--indirect` option denotes that we want
to use `g++` and not `ld` directly, so the tool prepends `-Wl,`.

[note For support or feature requests, feel free to write us an [@mailto:info@cpp-sc.de E-Mail]]

[important This tool and it's header require [@www.boost.org boost] to build.]

[endsect]