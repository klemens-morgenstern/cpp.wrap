[def CPP_WRAP_FN [link wrap.reference.header.CPP_WRAP_FN CPP_WRAP_FN]]
[def CPP_WRAP_FN_FIX [link wrap.reference.header.CPP_WRAP_FN_FIX CPP_WRAP_FN_FIX]]
[def CPP_WRAP_MEM [link wrap.reference.header.CPP_WRAP_MEM CPP_WRAP_MEM]]
[def CPP_WRAP_MEM_FIX [link wrap.reference.header.CPP_WRAP_MEM_FIX CPP_WRAP_MEM_FIX]]
[def CPP_WRAP_STATIC_MEM [link wrap.reference.header.CPP_WRAP_STATIC_MEM CPP_WRAP_STATIC_MEM]]
[def CPP_WRAP_STATIC_MEM_FIX [link wrap.reference.header.CPP_WRAP_STATIC_MEM_FIX CPP_WRAP_STATIC_MEM_FIX]]
[def cpp/wrap.hpp [link wrap.reference.header cpp/wrap.hpp]]


[section:extended In-Depth]

[section:runtime Constructed Wraps]

The macros without the `_FIX` appendix are runtime-wraps. What this means is that they are members of a class and are constructed with it. The macros are:

* CPP_WRAP_FN
* CPP_WRAP_MEM
* CPP_WRAP_STATIC_MEM

So let's consider an example, with two functions:

```
//foo.cpp
int foo() {return 0;}
```

[import ../example/multiple_stubs.cpp]
[multiple_stubs]

The example given above will create stubs at runtime so that several can be used in the same binary. Additionally the original function can be used.
This also means that a link to the original function will be created, so there's a guarantee that the symbol-to-wrap is actually defined.

[warning Trying to construct several objects with CPP_WRAP_FN will cause an exception to be thrown.]

[endsect]


[section:fix Fixed Wraps]

The fix wraps have a post-fix `_FIX` wrap using global functions at compile-time.

[import ../example/fixed_stub.cpp]
[fixed_stub]

The disadvantage here is that the original function cannot be used (as in is not referenced) and thus there will be no link be generated against it.
This means that the linker will not generate an error if the wrapped function is not present.

[endsect]

[section:template Using Templates]

C++11 introduced the `extern template` which will generate extern linkage for templates. So let's do this in an example, 
we'll use [@http://en.cppreference.com/w/cpp/container/vector std::vector] for this.
We'll put the template instanciation into a source fill, which needs to be compiled and linked.

```
#include <vector>
namespace std
{
template class std::vector<int, std::allocator<int>>; //define it
}
```

In our test we tell the compiler that vector will be externally linked and declare the wraps:

[import ../example/template_stub.cpp]
[template_stub]

By utilizing `extern template` we can thus wrap template functions or member functions of template classes. 

[note The class-name can be put into parenthesis if it is a template containing a comma.]

[endsect]
[endsect]